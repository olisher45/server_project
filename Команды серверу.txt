reg [login] [password] [type] [loginTeacher] | Добавляет пользователя в базу данных type: 0 - студент, 1 - преподаватель loginTeacher - при регистрации преподавателя можно передавать любое значение
return: reg$[1 - если пользователь добавлен в базу данных, 0 - если данный пользователь уже есть в базе данных]

auth [login] [password] | Указывает для пользователя с данным логином и паролем дескриптор текущего подключения
return: auth$[ключ данного подключения или целое число]

check_auth [userKey] | Проверить, что пользователь с данным ключом внесён в базу данных
return: check_auth$[1 - если пользователь с данным ключом есть в базе данных, 0 - если нет]

reset_connections | Удаляет подключения для всех пользователей базы данных
return: reset_connections

task [userKey] [taskNumber] [taskKey] [answer] | Отправляет задание на проверку
return: task_is_done$[1 - если задание выполнено верно, 0 - если задание выполнено не верно]

user_logout [login] [password] | Удаляет подключение для пользователя с данными логином и паролем
return: user_logout$[1 - если пользователь существовал в базе данных, 0 - если нет]

get_task [taskNumber] | Получить текст задания с данным номером. 
return: get_task$[taskNumber]$[taskKey (seed)]$[taskText]$[data] 

del_group [userKey] | Удалить группу данного пользователя, если он является преподавателем
return: del_group$[логин преподавателя]

is_it_a_teacher [userKey] | Возвращает true, если запрос идёт от преподавателя
return: is_it_a_teacher$[1 - учитель, 0 - нет]

get_students_list [userKey] | Если запрос идёт от преподавателя, возвращает список логинов его студентов 
return: get_students_list$[student1]$[student2]$[student3]... Если от ученика, то вернётся пустая строка

get_statistics [userKey] [studentLogin] [taskNumber] | Если запрос идёт от преподавателя группы в которой состоит ученик, возвращает статистику по заданию ученика в следующем формате: [количество верных попыток]$[количество неверных попыток]$[номера вариантов последних двадцати неверных попыток с разделителем $]

